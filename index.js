// index.js

const express = require('express');
const ytsr = require('ytsr');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get('/api/v1/search', async (req, res) => {
  const query = req.query.q;

  if (!query) {
    return res.status(400).json({ error: 'Query parameter "q" is required.' });
  }

  try {
    const filters = await ytsr.getFilters(query);
    const searchResults = await ytsr(query, { pages: 1 });

    const formattedResults = searchResults.items.map(item => {
      // search.json の形式に合うようにデータを整形
      if (item.type === 'channel') {
        return {
          type: 'channel',
          author: item.name,
          authorId: item.channelID,
          authorUrl: item.url,
          authorVerified: item.verified,
          authorThumbnails: item.thumbnails.map(thumb => ({
            url: thumb.url,
            width: thumb.width,
            height: thumb.height
          })),
          autoGenerated: item.isAutoGenerated,
          subCount: item.subscribers,
          videoCount: item.videos,
          channelHandle: item.url.split('/').pop(),
          description: item.description,
          descriptionHtml: item.description,
        };
      } else if (item.type === 'video') {
        return {
          type: item.isLive ? 'live' : 'video',
          title: item.title,
          videoId: item.id,
          author: item.author.name,
          authorId: item.author.channelID,
          authorUrl: item.author.url,
          authorVerified: item.author.verified,
          authorThumbnails: item.author.thumbnails.map(thumb => ({
            url: thumb.url,
            width: thumb.width,
            height: thumb.height
          })),
          videoThumbnails: item.thumbnails.map(thumb => ({
            quality: 'default', // ytsr に quality フィールドがないため仮設定
            url: thumb.url,
            width: thumb.width,
            height: thumb.height
          })),
          description: item.description,
          descriptionHtml: item.description,
          viewCount: item.views,
          viewCountText: item.views ? `${(item.views / 1000000).toFixed(1)}M views` : null, // ytsrにはViewCountTextがないため独自に生成
          published: null, // ytsrのpublishedは文字列のため、timestampに変換する場合はロジックが必要
          publishedText: item.uploadedAt,
          lengthSeconds: item.duration ? parseDurationToSeconds(item.duration) : null,
          liveNow: item.isLive,
          premium: item.isPaid,
          isUpcoming: item.isUpcoming,
          isNew: item.isNew,
          is4k: item.is4k,
          is8k: item.is8k,
          isVr180: item.isVr180,
          isVr360: item.isVr360,
          is3d: item.is3d,
          hasCaptions: item.hasCaptions
        };
      } else {
        // channel と video 以外のタイプは無視
        return null;
      }
    }).filter(item => item !== null);

    res.status(200).json(formattedResults);
  } catch (error) {
    console.error('Search error:', error);
    res.status(500).json({ error: 'An error occurred during the search.' });
  }
});

function parseDurationToSeconds(duration) {
  if (!duration) return null;
  const parts = duration.split(':').map(Number);
  if (parts.length === 1) return parts[0];
  if (parts.length === 2) return parts[0] * 60 + parts[1];
  if (parts.length === 3) return parts[0] * 3600 + parts[1] * 60 + parts[2];
  return null;
}

app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});
